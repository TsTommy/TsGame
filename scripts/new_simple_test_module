#!/bin/perl

use strict;
use warnings;

sub error
{
  my ($errmsg) = @_;
  print("$errmsg\n");
  print("Usage: $0 MODULE_NAME\n");
  exit(1);
}

error('Incorrect arguments.') if(@ARGV != 1);

my ($classname) = @ARGV;
my $test_class = "${classname}_test";

error("Directory 'src' not found.") unless (`ls src/.`);
error("Directory 'src/test' not found.") unless (`ls src/test/.`);
error("${test_class}.h exists.")   if(`ls src/test/${test_class}.h`);
error("${test_class}.cpp exists.") if(`ls src/test/${test_class}.cpp`);

my $test_guard = uc($classname).'_TEST_H_INCLUDED';

my $script = <<"END"
echo Creating ${test_class}.h ...
echo >  src/test/${classname}_test.h '#ifndef ${test_guard}'
echo >> src/test/${classname}_test.h '#define ${test_guard}'
echo >> src/test/${classname}_test.h
echo >> src/test/${classname}_test.h '#include <cppunit/extensions/HelperMacros.h>'
echo >> src/test/${classname}_test.h
echo >> src/test/${classname}_test.h 'class ${test_class}'
echo >> src/test/${classname}_test.h '		: public CppUnit::TestFixture'
echo >> src/test/${classname}_test.h '{'
echo >> src/test/${classname}_test.h '	CPPUNIT_TEST_SUITE(${test_class});'
echo >> src/test/${classname}_test.h '	CPPUNIT_TEST(test_drive);'
echo >> src/test/${classname}_test.h '	CPPUNIT_TEST_SUITE_END();'
echo >> src/test/${classname}_test.h
echo >> src/test/${classname}_test.h 'public:'
echo >> src/test/${classname}_test.h '	void setUp();'
echo >> src/test/${classname}_test.h '	void tearDown();'
echo >> src/test/${classname}_test.h
echo >> src/test/${classname}_test.h '	void test_drive();'
echo >> src/test/${classname}_test.h
echo >> src/test/${classname}_test.h 'private:'
echo >> src/test/${classname}_test.h '};'
echo >> src/test/${classname}_test.h
echo >> src/test/${classname}_test.h '#endif //${test_guard}'
echo Creating ${test_class}.cpp ...
echo >  src/test/${classname}_test.cpp '#include "${classname}.h"'
echo >> src/test/${classname}_test.cpp '#include "test/${test_class}.h"'
echo >> src/test/${classname}_test.cpp
echo >> src/test/${classname}_test.cpp 'CPPUNIT_TEST_SUITE_REGISTRATION(${test_class});'
echo >> src/test/${classname}_test.cpp
echo >> src/test/${classname}_test.cpp 'void ${test_class}::setUp()'
echo >> src/test/${classname}_test.cpp '{'
echo >> src/test/${classname}_test.cpp '}'
echo >> src/test/${classname}_test.cpp 'void ${test_class}::tearDown()'
echo >> src/test/${classname}_test.cpp '{'
echo >> src/test/${classname}_test.cpp '}'
echo >> src/test/${classname}_test.cpp
echo >> src/test/${classname}_test.cpp 'void ${test_class}::test_drive()'
echo >> src/test/${classname}_test.cpp '{'
echo >> src/test/${classname}_test.cpp '	CPPUNIT_ASSERT_EQUAL(0,1);'
echo >> src/test/${classname}_test.cpp '}'
echo Done.
END
;

print(`$script`);
